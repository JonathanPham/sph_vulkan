#version 450
#extension GL_ARB_shading_language_420pack : enable

#define M_PI_F 3.14159265358979323846f
#define WORK_GROUP_SIZE 128

layout (local_size_x = WORK_GROUP_SIZE) in;

struct particle_type
{
    vec2 position;
    vec2 velocity;
    vec2 force;
    float density;
    float pressure;
};

layout(std430, binding = 0) buffer position_block
{
    particle_type particles[];
};

//constants
const float particle_length = 0.005f;
const float particle_mass = 0.8f * particle_length * particle_length * 1000;
const float smoothing_radius = 4 * particle_length;
const float viscosity = 3000.f;
// OpenGL y-axis is pointing up, while Vulkan y-axis is pointing down.
// So in OpenGL this should be negative, but in Vulkan this should be positive.
const vec2 gravity = vec2(0, 12000);
const uint particle_count = 20000;

vec2 kernel_spiky_d1(vec2 ra, float h)
{
    float r = length(ra);
    float term1 = -45.f / (M_PI_F * pow(h, 6));
    float term2 = pow(h - r, 2);
    vec2 term3 = normalize(ra);
    return term1 * term2 * term3;
}

float kernel_viscosity_d2(vec2 ra, float h)
{
    float r = length(ra);
    return 45.f / (M_PI_F * pow(h, 6)) * (h - r);
}

void main()
{
    uint i = gl_GlobalInvocationID.x;  
    // 3. compute all forces
    vec2 pressure_force = vec2(0, 0);
    vec2 viscosity_force = vec2(0, 0);
    
    for (uint j = 0; j < particle_count; j++)
    {
        if (i == j)
        {
            continue;
        }
        vec2 h = particles[i].position - particles[j].position;
        if (length(h) < smoothing_radius)
        {
            pressure_force += -particle_mass * (particles[i].pressure + particles[j].pressure) / (2.f * particles[j].density) * kernel_spiky_d1(h, smoothing_radius);
            viscosity_force += particle_mass * (particles[j].velocity - particles[i].velocity) / particles[j].density * kernel_viscosity_d2(h, smoothing_radius);
        }
    }
    vec2 external_force = particles[i].density * gravity;
    viscosity_force *= viscosity;
    // write results
    particles[i].force = pressure_force + viscosity_force + external_force;
}
