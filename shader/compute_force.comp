#version 450
#extension GL_ARB_shading_language_420pack : enable

#define WORK_GROUP_SIZE 128

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants
#define PI_FLOAT 3.1415927410125732421875f
#define PARTICLE_RADIUS 0.005f
#define PARTICLE_MASS (0.8f * PARTICLE_RADIUS * PARTICLE_RADIUS * 1000)
#define SMOOTHING_LENGTH (4 * PARTICLE_RADIUS)
#define PARTICLE_RESTING_DENSITY 1000
#define PARTICLE_STIFFNESS 2000
#define PARTICLE_COUNT 20000

// OpenGL y-axis is pointing up, while Vulkan y-axis is pointing down.
// So in OpenGL this should be negative, but in Vulkan this should be positive.
#define GRAVITY_FORCE vec2(0, 12000)
#define PARTICLE_VISCOSITY 3000.f

struct particle_type
{
    vec2 position;
    vec2 velocity;
    vec2 force;
    float density;
    float pressure;
};

layout(std430, binding = 0) buffer position_block
{
    particle_type particles[];
};


void main()
{
    uint i = gl_GlobalInvocationID.x;  
    // compute all forces
    vec2 pressure_force = vec2(0, 0);
    vec2 viscosity_force = vec2(0, 0);
    
    for (uint j = 0; j < PARTICLE_COUNT; j++)
    {
        if (i == j)
        {
            continue;
        }
        vec2 delta = particles[i].position - particles[j].position;
        float r = length(delta);
        if (r < SMOOTHING_LENGTH)
        {
            pressure_force -= PARTICLE_MASS * (particles[i].pressure + particles[j].pressure) / (2.f * particles[j].density) *
            // gradient of spiky kernel
                -45.f / (PI_FLOAT * pow(SMOOTHING_LENGTH, 6)) * pow(SMOOTHING_LENGTH - r, 2) * normalize(delta);
            viscosity_force += PARTICLE_MASS * (particles[j].velocity - particles[i].velocity) / particles[j].density *
            // Laplacian of viscosity kernel
                45.f / (PI_FLOAT * pow(SMOOTHING_LENGTH, 6)) * (SMOOTHING_LENGTH - r);
        }
    }
    vec2 external_force = particles[i].density * GRAVITY_FORCE;
    viscosity_force *= PARTICLE_VISCOSITY;
    
    particles[i].force = pressure_force + viscosity_force + external_force;
}
